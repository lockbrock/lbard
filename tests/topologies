#!/bin/bash

# Tests for Serval LBARD
#
# Copyright 2016 Serval Project, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


source "${0%/*}/../serval-dna/testframework.sh"
source "${0%/*}/../topology_testdefs.sh"


setup_bundles() {
   # Configure four servald daemons without any interfaces connecting them, and
   # start them running.
   setup_servald
   assert_no_servald_processes
   foreach_instance +A +B +C +D create_single_identity
   echo "1: $1"
   echo "2: $2"
   echo "3: $3"
   eval v="$4"
   echo "4: ${v}"
   # Create files in each servald instance if requested
   if [ "x$2" != "x" ]; then
      # 2: number of common files
       common_files=$2
       n=0
       while [ $n -lt $files_per_instance ]
       do
         ++n
	      set_instance +A
         create_file file-common-${n} 10000
	      echo -e "service=File\nsender=$SIDA\nrecipient=$SIDB" >file$n.manifest
	      executeOk_servald rhizome add file $SIDA file-common-${n} file${n}.manifest
	      extract_manifest_id BID file${n}.manifest
	      extract_manifest_version VERSION file${n}.manifest
	      executeOk_servald rhizome export bundle $BID file${n}e.manifest file${n}e
         for i in B C D; do
            set_instance +B
            executeOk_servald rhizome import bundle file1e file1e.manifest	       
         done
      done
   fi
   if [ "x$3" != "x" ]; then
   # 3: number of files per instance
      files_per_instance=$3       
      for i in A B C D
      do
         set_instance +$i
	      local sidvar="SID$instance_name"
         n=0
	      while [ $n -lt $files_per_instance ] 
         do
            n++
            create_file file-$i-$n 10000
            tfw_quietly executeOk_servald rhizome add file "${!sidvar}" file-$i-$n file-$i-$n.manifest	   
	      done
      done
   fi
   eval param="$4"
   if [ "x$params" != "x" ]; then
   # 4: lbard flags
       lbardflags="$4"
   else
       lbardflags=""
   fi
}


setup() {
   setup_bundles $*
   start_instances $*
}


doc_DualType="Test, can we get wifi/radio working together?"
setup_DualType(){
   # No radio connection between 1(B) and 2(C)
   lbardparams="allow between 0,1; allow between 2,3; deny all;"

   setup 0 0 0 "\${lbardparams}"
   # Connect 1(B) and 2(C) via a wifi interface of number 1
   foreach_instance +B +C add_servald_interface 1

   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_DualType(){
   dReceivedBundles() {
      bundle_received_by $BID:$VERSION +D
   }
   wait_until --timeout=60 dReceivedBundles
}

doc_multihop_wifi="Send a bundle between chain of wifi nodes"
setup_multihop_wifi() {
   lbardparams="deny all;"

   setup 0 0 0 "\${lbardparams}"
   assert_no_servald_processes
   foreach_instance +A +B add_servald_interface 1
   foreach_instance +B +C add_servald_interface 2
   foreach_instance +C +D add_servald_interface 3
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_multihop_wifi() {
   dReceivedBundles() {
      bundle_received_by $BID:$VERSION +D
   }
   wait_until --timeout=60 dReceivedBundles
}


doc_OneOne="FAKE RADIO - RFD900 - A single very small bundle transfers to a single peer"
setup_OneOne() {
   lbardparams="allow between 0,1; deny all;"
   setup 0 0 0 "\${lbardparams}" 
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_OneOne() {
   # Test that the bundle arrives at server B
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B 
   }
   wait_until all_bundles_received
}

doc_One="FAKE RADIO - RFD900 - A single very small bundle transfers to 3 peers"
setup_One() {
   lbardparams="allow between 0,3; allow between 3,2; allow between 2,1; deny all;"
   setup 0 0 0 "\${lbardparams}"
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_One() {
   # Test that the bundle arrives at servers B, C and D
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B &&
         bundle_received_by $BID:$VERSION +C &&
         bundle_received_by $BID:$VERSION +D
   }
   wait_until all_bundles_received
}
runTests "$@"
