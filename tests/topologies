#!/bin/bash

# Tests for Serval LBARD
#
# Copyright 2016 Serval Project, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


source "${0%/*}/../serval-dna/testframework.sh"
source "${0%/*}/../topology_testdefs.sh"


setup_bundles() {
   # Configure four servald daemons without any interfaces connecting them, and
   # start them running.
   setup_servald
   assert_no_servald_processes
   foreach_instance +A +B +C +D create_single_identity

   # Create files in each servald instance if requested
   if [ "x$2" != "x0" ]; then
      tfw_log "Adding $2 common files"
      # 2: number of common files
       common_files=$2
       n=0
       while [ $n -lt $files_per_instance ]
       do
         ++n
	      set_instance +A
         create_file file-common-${n} 10000
	      echo -e "service=File\nsender=$SIDA\nrecipient=$SIDB" >file$n.manifest
	      executeOk_servald rhizome add file $SIDA file-common-${n} file${n}.manifest
	      extract_manifest_id BID file${n}.manifest
	      extract_manifest_version VERSION file${n}.manifest
	      executeOk_servald rhizome export bundle $BID file${n}e.manifest file${n}e
         for i in B C D; do
            set_instance +B
            executeOk_servald rhizome import bundle file1e file1e.manifest	       
         done
      done
   fi
   if [ "x$3" != "x" ]; then
   # 3: number of files per instance
      tfw_log "Adding $2 files to each instance"
      files_per_instance=$3       
      for i in A B C D
      do
         set_instance +$i
	      local sidvar="SID$instance_name"
         n=0
	      while [ $n -lt $files_per_instance ] 
         do
            n++
            create_file file-$i-$n 10000
            tfw_quietly executeOk_servald rhizome add file "${!sidvar}" file-$i-$n file-$i-$n.manifest	   
	      done
      done
   fi
   eval param="$4"
   if [ "x$params" != "x" ]; then
   # 4: lbard flags
       lbardflags="$4"
   else
       lbardflags=""
   fi
}

setup() {
   setup_bundles $*
   start_instances $*
}



doc_nSetup="Testing if we can create {n} serval instances"
setup_nSetup(){
   setupN "+A +B +C +D +E +F"  "rfd900,rfd900,rfd900,rfd900,rfd900,rfd900" "allow between 0,1; allow between 3,4; allow between 4,5; deny all;"
   #setupN "+A +B +C +D +E +F"  "rfd900,rfd900,rfd900,rfd900,rfd900,rfd900" "0" "allow between 0,1;allow between 3,4;allow between 4,5;"
   
   foreach_instance +B +C add_servald_interface 1
   foreach_instance +C +D add_servald_interface 2

   set_instance +A
   rhizome_add_file file1 50
}
test_nSetup(){
      fReceivedBundles() {
      bundle_received_by $BID:$VERSION +F
   }
   wait_until --timeout=120 fReceivedBundles
}


doc_DualType="A 4 node wifi/rfd900 chain. One wifi, two radio links"
setup_DualType(){
   # A -r-> B -w-> C -r-> D
   # No radio connection between 1(B) and 2(C)
   lbardparams="allow between 0,1; allow between 2,3; deny all;"

   setup 0 0 0 "\${lbardparams}"
   # Connect 1(B) and 2(C) via a wifi/rhizome interface of number 1
   foreach_instance +B +C add_servald_interface 1

   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_DualType(){
   dReceivedBundles() {
      bundle_received_by $BID:$VERSION +D
   }
   wait_until --timeout=60 dReceivedBundles
}

doc_multihop_wifi="Send a bundle between a chain of 4 wifi nodes"
setup_multihop_wifi() {
   lbardparams="deny all;"

   setup 0 0 0 "\${lbardparams}"
   assert_no_servald_processes
   foreach_instance +A +B add_servald_interface 1
   foreach_instance +B +C add_servald_interface 2
   foreach_instance +C +D add_servald_interface 3
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_multihop_wifi() {
   dReceivedBundles() {
      bundle_received_by $BID:$VERSION +D
   }
   wait_until --timeout=60 dReceivedBundles
}


doc_OneOne="FAKE RADIO (RFD900) - A single very small bundle transfers to a single peer"
setup_OneOne() {
   lbardparams="allow between 0,1; deny all;"
   setup 0 0 0 "\${lbardparams}" 
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_OneOne() {
   # Test that the bundle arrives at server B
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B 
   }
   wait_until all_bundles_received
}

doc_One="FAKE RADIO (RFD900) A single very small bundle transfers to 3 peers"
setup_One() {
   lbardparams="allow between 0,3; allow between 3,2; allow between 2,1; deny all;"
   setup 0 0 0 "\${lbardparams}"
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_One() {
   # Test that the bundle arrives at servers B, C and D
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B &&
         bundle_received_by $BID:$VERSION +C &&
         bundle_received_by $BID:$VERSION +D
   }
   wait_until all_bundles_received
}

doc_RFD900_Chain="100 byte bundle along chain of 10 UHF nodes"
setup_RFD900_Chain(){
   # Ooof long setup line..
   setupN "+A +B +C +D +E +F +G +H +I +J"  "rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900" "allow between 0,1; allow between 1,2; allow between 2,3; allow between 3,4; allow between 4,5; allow between 5,6; allow between 6,7; allow between 7,8; allow between 8,9; deny all;"
   set_instance +A
   rhizome_add_file file1 100
}
test_RFD900_Chain(){
   j_received_bundle(){
      bundle_received_by $BID:$VERSION +J
   }
   wait_until --timeout=180 j_received_bundle
}

doc_Wifi_RFD900_Chain="100 byte bundle along chain of 10 WIFI/UHF links"
setup_Wifi_RFD900_Chain(){
   # Ooof long setup line..
   setupN "+A +B +C +D +E +F +G +H +I +J"  "rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900" "allow between 0,1; allow between 2,3;  allow between 4,5; allow between 6,7; allow between 8,9; deny all;"
   
   foreach_instance +B +C add_servald_interface 1
   foreach_instance +D +E add_servald_interface 2
   foreach_instance +F +G add_servald_interface 3
   foreach_instance +H +I add_servald_interface 4

   set_instance +A
   rhizome_add_file file1 100
}
test_Wifi_RFD900_Chain(){
   j_received_bundle(){
      bundle_received_by $BID:$VERSION +J
   }
   wait_until --timeout=180 j_received_bundle
}

setup_lab_topology(){
   # Lab network topology, column on the right is the node ID
   #  A(0)  :  Lab
   #  B(1) :  8
   #  C(2)  :  9
   #  D(3)  :  10
   #  E(4)  :  11
   #  F(5)  :  A1
   #  G(6)  :  A2
   #  H(7) :  A3

   setupN "+A +B +C +D +E +F +G +H"  "rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900,rfd900" "allow between 0,1; allow between 0,3; allow between 1,3; allow between 3,4; allow between 4,6; allow between 6,5;" 
   foreach_instance +B +C add_servald_interface 1
   foreach_instance +F +H add_servald_interface 2
}

doc_Lab_File="Send a file from the Lab(A) to A3(H)"
setup_Lab_File(){
   setup_lab_topology

   set_instance +A
   rhizome_add_file file1 100
}
test_Lab_File(){
   all_received_bundle(){
      bundle_received_by $BID:$VERSION +H
   }
   wait_until --timeout=180 all_received_bundle
}

two_way_conversation(){
   # From lbard test file
   if [ "x$1" != "x" ]; then
	   maxwait=$1
   else
      maxwait=120
   fi

   if [ "x$2" != "x" ]; then
      sender=$2
   else
      sender="B"
   fi

   if [ "x$3" != "x" ]; then
      receiver=$3
   else
      receiver="A"
   fi


   eval tmp="\$\SID\$sender"; 
   eval sender_sid=${tmp}

   eval tmp="\$\SID\$receiver"; 
   eval receiver_sid=${tmp}


   # 1. empty list
   set_instance "+$sender"
   executeOk_servald meshms list messages $sender_sid $receiver_sid
   assertStdoutIs --stdout --line=1 -e '6\n'
   assertStdoutIs --stdout --line=2 -e '_id:my_offset:their_offset:age:type:message\n'
   assertStdoutLineCount '==' 2

   # 2. create a manifest with a single message, list it back and wait for delivery
   set_instance "+$sender"
   executeOk_servald meshms send message $sender_sid $receiver_sid "Hi"
   executeOk_servald rhizome list
   receives_first_message() {
       set_instance "+$receiver"
       executeOk_servald meshms list messages $receiver_sid $sender_sid
       if ! grep ":<:Hi\$" $_tfw_tmp/stdout; then
	   return 1
       fi
   }   
   wait_until --timeout=$maxwait receives_first_message
   
   # 3. append a second message and list them both
   set_instance "+$sender"
   executeOk_servald meshms send message $sender_sid $receiver_sid "How are you"
   executeOk_servald meshms list messages $sender_sid $receiver_sid
   tfw_cat --stdout
   assertStdoutGrep --stdout --matches=1 ":>:How are you\$"
   assertStdoutGrep --stdout --matches=1 ":>:Hi\$"
   assertStdoutLineCount '==' 4
   
   # 4. list the messages from the receivers point of view (which ACKs them)
   receives_second_message() {
       executeOk_servald meshms list messages $receiver_sid $sender_sid
       tfw_cat --stdout
       if ! egrep "^0:[0-9]+:[0-9]+:[0-9]+:<:How are you\$" $_tfw_tmp/stdout; then
	   return 1
       fi
       if ! egrep "^1:[0-9]+:[0-9]+:[0-9]+:<:Hi\$" $_tfw_tmp/stdout; then
	   return 1;
       fi
   }
   set_instance "+$receiver"
   wait_until --timeout=$maxwait receives_second_message
   
   CONV_BID=$(replayStderr | sed -n -e '/MESHMS CONVERSATION BUNDLE/s/.*bid=\([0-9A-F]*\).*/\1/p')
   CONV_SECRET=$(replayStderr | sed -n -e '/MESHMS CONVERSATION BUNDLE/s/.*secret=\([0-9A-F]*\).*/\1/p')
   tfw_log "CONV_BID=$CONV_BID CONV_SECRET=$CONV_SECRET"
   
   # 5. mark the first message as read
   set_instance "+$receiver"
   executeOk_servald meshms read messages $receiver_sid $sender_sid 5
   tfw_cat --stderr
   executeOk_servald meshms list messages $receiver_sid $sender_sid
   assertStdoutGrep --stdout --matches=1 ":<:How are you\$"
   assertStdoutEgrep --stdout --matches=1 ":5:[0-9]+:[0-9]+:MARK:read\$"
   assertStdoutGrep --stdout --matches=1 ":<:Hi\$"
   assertStdoutLineCount '==' 5
   
   # 6. mark all messages as read
   set_instance "+$receiver"
   executeOk_servald meshms read messages $receiver_sid
   executeOk_servald meshms list messages $receiver_sid $sender_sid
   assertStdoutEgrep --stdout --matches=1 "^0:25:[0-9]+:[0-9]+:MARK:read\$"
   assertStdoutEgrep --stdout --matches=1 "^1:[0-9]+:25:[0-9]+:<:How are you\$"
   assertStdoutEgrep --stdout --matches=1 "^2:[0-9]+:5:[0-9]+:<:Hi\$"
   assertStdoutLineCount '==' 5
   
   # 7. list messages from the senders point of view after they have been delivered
   sender_receives_read_receipt() {
       set_instance "+$sender"
       executeOk_servald meshms list messages $sender_sid $receiver_sid

       tfw_cat --stdout
       if ! egrep "^0:25:[0-9]+:[0-9]+:ACK:delivered\$" $_tfw_tmp/stdout; then
	   return 1;
       fi
       if ! egrep "^1:25:0:[0-9]+:>:How are you\$" $_tfw_tmp/stdout; then
	   return 1
       fi
       if ! egrep "^2:5:0:[0-9]+:>:Hi\$" $_tfw_tmp/stdout; then
	   return 1;
       fi
       assertStdoutLineCount '==' 5
   }
   wait_until  --timeout=$maxwait sender_receives_read_receipt
}

doc_Lab_Message="Have a MeshMS conversation from 9(C) to A3(H) and back"
setup_Lab_Message(){
   setup_lab_topology
}
test_Lab_Message(){
   two_way_conversation 30 'C' 'H'
}

#doc_TEMP="TEMP"
#setup_TEMP(){
#   
#}
#test_TEMP(){

#}

#doc_TEMP="TEMP"
#setup_TEMP(){
#
#}
#test_TEMP(){
#
#}

runTests "$@"

